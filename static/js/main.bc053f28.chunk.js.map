{"version":3,"sources":["events.js","components/Tile.jsx","components/Game.jsx","components/VictoryModal.jsx","components/LevelNavigation.jsx","components/App.jsx","actions.js","initial_state.js","index.js","reducer.js"],"names":["tileUpClicked","clicked_tile","event","current_level","store","getState","down_clicked_tile","board","currently_selected","button","will_change","dispatch","type","tile","tileDownClicked","newGameButtonClicked","interval","setInterval","setTimeout","clearInterval","navigateLevelButtonClicked","level_index","level","in_winning_state","best_score","color_map","0","1","2","3","4","5","Tile","game_in_progress","className","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","style","backgroundColor","current_color","transform","opacity","pointerEvents","userSelect","color","Game","tiles","current_moves","current_level_index","map","id","onContextMenu","preventDefault","display","gridTemplateColumns","length","Math","floor","sqrt","gridTemplateRows","gridGap","VictoryModal","onClick","href","data-show-count","async","src","charSet","data-href","data-layout","data-size","data-mobile-iframe","target","rel","window","location","encodeURIComponent","alt","LevelNavigation","levels","highest_unlocked_level","buttons","index","current_level_class","is_unlocked","locked_class","title","App","state","moves","action","method","name","value","advance_tile_color","filter","potential_tile","target_tiles","includes","updated_tile","previous_tile_color","highlight_tiles","clear_highlights","shuffle_colors","keystone","random","i","shffle_tile_index","shuffle_tile","target_tiles_ids","updated_colors","every","tiles_would_solve_puzzle","solve_puzzle","navigate_level","this","highest_level","entries","persisted_state","localStorage","getItem","JSON","parse","TileData","INITIAL_STATE","createStore","render","ReactDOM","document","getElementById","addEventListener","querySelector","subscribe","setItem","stringify"],"mappings":"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","file":"static/js/main.bc053f28.chunk.js","sourcesContent":["import { store } from './index';\n\nexport const tileUpClicked = clicked_tile => event => {\n  let current_level = store.getState().current_level();\n  let down_clicked_tile = current_level.board[current_level.currently_selected];\n\n  if (event.button === 0 && (clicked_tile.will_change || down_clicked_tile === clicked_tile)) {\n    store.dispatch({ type: 'ADVANCE_TILE_COLOR', tile: down_clicked_tile });\n  }\n  else if (event.button === 2 && (clicked_tile.will_change || down_clicked_tile === clicked_tile)) {\n    store.dispatch({ type: 'PREVIOUS_TILE_COLOR', tile: clicked_tile });\n  }\n  store.dispatch({ type: 'CLEAR_HIGHLIGHTS' });\n}\n\nexport const tileDownClicked = clicked_tile => event => {\n  store.dispatch({ type: 'HIGHLIGHT_TILES', tile: clicked_tile });\n}\n\nexport const newGameButtonClicked = event => {\n  let interval = setInterval(function() {\n    store.dispatch({ type: 'SHUFFLE_COLORS' })\n  }, 50);\n  setTimeout(function() { clearInterval(interval) }, 800);\n}\n\nexport const navigateLevelButtonClicked = level_index => event => {\n  store.dispatch({ type: 'NAVIGATE_LEVEL', level: level_index });\n\n  let current_level = store.getState().current_level();\n\n  if (current_level.in_winning_state() && current_level.best_score === 'N/A') {\n    store.dispatch({ type: 'SHUFFLE_COLORS' });\n  }\n}","import React from 'react';\nimport '../styles/Tile.css';\nimport { tileUpClicked, tileDownClicked } from '../events';\n\nlet color_map = {\n  0: \"#B71234\",\n  1: \"#FF5800\",\n  2: \"#FFD500\",\n  3: \"#009B48\",\n  4: \"#0046AD\",\n  5: \"#FFFFFF\",\n}\n\nexport const Tile = ({tile, game_in_progress}) => \n  <div className='Tile' \n       onMouseDown={tileDownClicked(tile)}\n       onMouseUp={tileUpClicked(tile)}\n       onTouchStart={tileDownClicked(tile)}\n       onTouchEnd={tileUpClicked(tile)}\n       style={{\n          backgroundColor: color_map[tile.current_color],\n          transform: tile.will_change ? 'scale(0.95)' : null,\n          opacity: tile.will_change ? 0.5 : 1,\n          pointerEvents: !game_in_progress ? 'none' : null,\n          userSelect: 'none'\n        }}>\n    <span style={{color: color_map[tile.current_color]}}>{tile.current_color}</span>\n  </div>\n\nexport default Tile;\n","import React from 'react';\nimport { Tile } from './Tile';\nimport '../styles/Game.css';\n\nexport const Game = ({tiles, game_in_progress, current_moves, current_level_index}) => {\n  tiles = tiles.map(tile => <Tile key={tile.id} tile={tile} game_in_progress={ game_in_progress }/>);\n  return (\n    <div className='Game' \n         onContextMenu={event => event.preventDefault() } \n         style={{ \n           display: game_in_progress ? null : 'none',\n           gridTemplateColumns: `repeat(${ tiles.length / Math.floor(Math.sqrt(tiles.length)) }, ${ 555 / (tiles.length / Math.floor(Math.sqrt(tiles.length))) - 15 }px)`,\n           gridTemplateRows: `repeat(${ Math.floor(Math.sqrt(tiles.length)) }, ${ 555 / (tiles.length / Math.floor(Math.sqrt(tiles.length))) - 15 }px)`,\n           gridGap: '15px' }} >\n      { tiles }\n    </div>\n  );\n}\n\nexport default Game;\n","import React from 'react';\nimport '../styles/VictoryModal.css';\nimport { newGameButtonClicked, navigateLevelButtonClicked } from '../events';\n\nexport const VictoryModal = ({game_in_progress, current_moves, current_level_index}) =>\n  <div className='VictoryModal' style={{ display: game_in_progress ? 'none' : null }}>\n    <h1>Solved in {current_moves} moves!</h1>\n    <p>Try to do it in fewer or move on?</p>\n    <div className='row'>\n      <span className='flat-button' onClick={ newGameButtonClicked }>Reset Puzzle</span>\n      <span className='flat-button' onClick={ navigateLevelButtonClicked(current_level_index + 1) }>Next Puzzle</span>\n    </div>\n    <p>Brag about it:</p>\n    <div className='row victory-share' style={{ display: game_in_progress ? 'none' : null }}>\n      <a href={`https://twitter.com/share?text=I%20beat%20#Chromattis%20in%20${current_moves}%20moves.%20I%20bet%20you%20can't%20do%20it%20in%20fewer!&via=CaptainStack`} className=\"twitter-share-button\" data-show-count=\"false\">Tweet</a><script async src=\"//platform.twitter.com/widgets.js\" charSet=\"utf-8\"></script>\n      <span className=\"fb-share-button\" data-href=\"https://captainstack.github.io/chromattis/\" data-layout=\"button_count\" data-size=\"small\" data-mobile-iframe=\"true\">\n        <a className=\"fb-xfbml-parse-ignore\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fcaptainstack.github.io%2Fchromattis%2F&amp;src=sdkpreparse\">\n          Share\n        </a>\n      </span>\n      <a href=\"//www.reddit.com/submit\" onClick={() => { window.location = '//www.reddit.com/submit?url=' + encodeURIComponent(window.location); return false }}> \n        <img src=\"//www.redditstatic.com/spreddit7.gif\" alt=\"submit to reddit\" />\n      </a>\n    </div>\n  </div>\n\nexport default VictoryModal;\n","import React from 'react';\nimport '../styles/LevelNavigation.css';\nimport { navigateLevelButtonClicked } from '../events';\n\nexport const LevelNavigation = ({levels, current_level_index, highest_unlocked_level}) => {\n\n  let buttons = levels.map((level, index) => {\n\n    let current_level_class = current_level_index === index ? 'current-level' : null;\n    let is_unlocked = highest_unlocked_level >= index;\n    let locked_class = is_unlocked ? 'unlocked' : 'locked';\n\n    return (\n      <span key={ index } \n         className={`level-navigation-button ${ current_level_class } ${ locked_class }`} \n         onClick={ is_unlocked ? navigateLevelButtonClicked(index) : null }\n         title={ is_unlocked ? `Click to go to level ${index}` : 'Locked' } >\n         {index}\n      </span>\n    )\n  })\n\n  return(<div className='LevelNavigation'>Select Level: {buttons}</div>);\n}\n\nexport default LevelNavigation;\n","import React from 'react';\nimport '../styles/App.css';\nimport { Game } from './Game';\nimport { store } from '../index';\nimport { VictoryModal } from './VictoryModal';\nimport { LevelNavigation } from './LevelNavigation';\nimport { newGameButtonClicked } from '../events';\n\nexport const App = ({state}) => {\n  let current_level = state.current_level();\n\n  return(\n    <div className=\"App\">\n      <div className=\"main-container\">\n        <div className='row'>\n          <h1>Chromattis</h1>\n          <div className='score-container'>\n            <h3>MOVES:</h3> \n            <p>{current_level.moves}</p>\n          </div>\n          <div className='score-container'>\n            <h3>BEST:</h3> \n            <p>{current_level.best_score}</p>\n          </div>\n        </div>\n        <div className='row'>\n          <p>Click tiles to make the whole puzzle <strong>one color.</strong></p>\n          <span className='flat-button' onClick={newGameButtonClicked}>Reset Puzzle</span>\n          <span className='flat-button' onClick={ () => { store.dispatch({ type: 'SOLVE_PUZZLE' }) } } style={{ display: 'none' }}>Solve</span>\n        </div>\n        <LevelNavigation levels={state.levels} current_level_index={state.current_level_index} highest_unlocked_level={state.highest_unlocked_level()}/>\n        <div className='row' id='game-row'>\n          <Game tiles={current_level.board} game_in_progress={!current_level.in_winning_state()} current_moves={current_level.moves} current_level_index={state.current_level_index}/>\n          <VictoryModal game_in_progress={ !current_level.in_winning_state() } current_moves={ current_level.moves } current_level_index={ state.current_level_index } />\n        </div>\n        <p><strong>HOW TO PLAY:</strong> Left-click to advance tiles to the next color. Right-click to change them to their previous. There are 6 colors in total that appear in the order red, orange, yellow, green, blue, white.</p>\n        <hr />\n        <p>Created by <a href='https://captainstack.github.io/public-stackhouse' target='_'><strong>Andre Stackhouse </strong></a> (<a href='https://twitter.com/intent/follow?original_referer=http%3A%2F%2Flocalhost%3A3000%2F&ref_src=twsrc%5Etfw&screen_name=CaptainStack&tw_p=followbutton'>@CaptainStack</a>). Source code hosted on <a href='https://github.com/CaptainStack/chromattis' target='_'><strong>GitHub</strong></a> under an open source MIT license.</p>\n        {/* SOCIAL MEDIA BUTTONS */}\n        <div className='row social'>\n          <a href=\"https://twitter.com/share?text=Are%20you%20smart%20enough%20to%20solve%20#Chromattis%3F&via=CaptainStack\" className=\"twitter-share-button\" data-show-count=\"true\">Tweet</a><script async src=\"//platform.twitter.com/widgets.js\" charSet=\"utf-8\"></script>\n          <div className=\"fb-share-button\" data-href=\"https://captainstack.github.io/chromattis/\" data-layout=\"button_count\" data-size=\"small\" data-mobile-iframe=\"true\"><a className=\"fb-xfbml-parse-ignore\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fcaptainstack.github.io%2Fchromattis%2F&amp;src=sdkpreparse\">Share</a></div>\n          <a href=\"//www.reddit.com/submit\" onClick={() => { window.location = '//www.reddit.com/submit?url=' + encodeURIComponent(window.location); return false }}> <img src=\"//www.redditstatic.com/spreddit7.gif\" alt=\"submit to reddit\" /> </a>\n          <form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_\">\n            <input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\" />\n            <input type=\"hidden\" name=\"hosted_button_id\" value=\"TFH72M6LQSGNG\" />\n            <input type=\"submit\" className='flat-button' value=\"Support via PayPal\" alt=\"PayPal - The safer, easier way to pay online!\" />\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const advance_tile_color = (state, tile) => {\r\n  let tiles = state.current_level().board.filter(potential_tile => tile.target_tiles.includes(potential_tile.id));\r\n\r\n  for (let updated_tile of tiles) {\r\n    updated_tile.current_color < 5 ? updated_tile.current_color += 1 : updated_tile.current_color = 0;\r\n  }\r\n  \r\n  state.current_level().moves++;\r\n\r\n  if (state.current_level().in_winning_state() && (state.current_level().best_score === 'N/A' || state.current_level().best_score > state.current_level().moves)) {\r\n    state.current_level().best_score = state.current_level().moves;\r\n  }\r\n\r\n  state.current_level().currently_selected = null;\r\n\r\n  return state;\r\n}\r\n\r\nexport const previous_tile_color = (state, tile) => {\r\n  let tiles = state.current_level().board.filter(potential_tile => tile.target_tiles.includes(potential_tile.id));\r\n\r\n  for (let updated_tile of tiles) {\r\n    updated_tile.current_color = updated_tile.current_color === 0 ? 5 : updated_tile.current_color - 1;\r\n  }\r\n  \r\n  state.current_level().moves++;\r\n\r\n  if (state.current_level().in_winning_state() && (state.current_level().best_score === 'N/A' || state.current_level().best_score > state.current_level().moves)) {\r\n    state.current_level().best_score = state.current_level().moves;\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport const highlight_tiles = (state, clicked_tile) => {\r\n  for (let tile of state.current_level().board) {\r\n    if (clicked_tile.target_tiles.includes(tile.id)) {\r\n      tile.will_change = true;\r\n    }\r\n  }\r\n  state.current_level().currently_selected = clicked_tile.id;\r\n\r\n  return state;\r\n}\r\n\r\nexport const clear_highlights = (state) => {\r\n  for (let tile of state.current_level().board) {\r\n    tile.will_change = false;\r\n  }\r\n  return state;\r\n}\r\n\r\nexport const tiles_would_solve_puzzle = (board, target_tiles) => {\r\n  let target_tiles_ids = target_tiles.map(tile => tile.id);\r\n  let updated_colors = board.map(tile => !target_tiles_ids.includes(tile.id) ? tile.current_color : tile.current_color < 5 ? tile.current_color + 1 : 0);\r\n\r\n  return updated_colors.every(color => color === updated_colors[0]);\r\n}\r\n\r\nexport const shuffle_colors = (state) => {\r\n  let board = state.current_level().board;\r\n  let keystone = board[Math.floor(Math.random() * board.length)];\r\n  let best_score = state.current_level().best_score;\r\n\r\n  for (let tile of board) {\r\n    if (tile === keystone || keystone.target_tiles.includes(tile.id)) {\r\n      tile.current_color = 0;\r\n    } else {\r\n      tile.current_color = 1;\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < 1000; i++) {\r\n    let shffle_tile_index = Math.floor(Math.random() * board.length);\r\n    let shuffle_tile = board[shffle_tile_index];\r\n\r\n    let target_tiles = board.filter(tile => shuffle_tile.target_tiles.includes(tile.id));\r\n\r\n    // Don't solve the puzzle while shuffling\r\n    if (!tiles_would_solve_puzzle(board, target_tiles)) {\r\n      advance_tile_color(state, shuffle_tile);\r\n    } else {\r\n      previous_tile_color(state, shuffle_tile);\r\n    }\r\n\r\n    state.current_level().moves = 0;\r\n  }\r\n  \r\n  state.current_level().best_score = best_score;\r\n\r\n  return state;\r\n}\r\n\r\nexport const solve_puzzle = (state) => {  \r\n  for (let tile of state.current_level().board) {\r\n    tile.current_color = 0;\r\n  }\r\n  return state;\r\n}\r\n\r\nexport const navigate_level = (state, level) => {\r\n  if (state.levels.length - 1 >= level) {\r\n    state.current_level_index = level;\r\n  }\r\n  return state;\r\n}\r\n","import { shuffle_colors } from './actions';\n\nlet in_winning_state = \n  function() {\n    for (let i = 1; i < this.board.length; i++) {\n      if (this.board[i].current_color !== this.board[i - 1].current_color) {\n        return false;\n      }\n    }\n    return true;\n  }\n\nlet current_level = \n  function() {\n    return this.levels[this.current_level_index];\n  }\n\nlet highest_unlocked_level = \n  function() {\n    let highest_level = 0;\n    for (let [index, level] of this.levels.entries()) {\n      if (level.best_score !== 'N/A') {\n        highest_level = index + 1;\n      } else {\n        break;\n      }\n    }\n    return highest_level;\n  }\n\nlet persisted_state = localStorage.getItem('chromattis_saved_state');\n\n// Rebuild the redux state by parsing the JSON string in localStorage\nif (persisted_state) {\n  persisted_state = JSON.parse(localStorage.getItem('chromattis_saved_state'));\n  persisted_state.current_level = current_level;\n  persisted_state.highest_unlocked_level = highest_unlocked_level;\n\n  for (let level of persisted_state.levels) {\n    level.in_winning_state = in_winning_state;\n  }\n}\n\nconst TileData = (id, target_tiles, will_change, current_color) => ({ id: id, will_change: will_change, current_color: current_color, target_tiles: target_tiles });\n\n// If there is no persisted_state in localStorage, initialize a new state with shuffled colors.\nexport const INITIAL_STATE = persisted_state ? persisted_state : shuffle_colors({\n  levels: [{\n    board: [\n      TileData(0, [0, 1]), TileData(1, [1]),\n    ],\n    moves: 0,\n    best_score: 'N/A',\n    currently_selected: null,\n    in_winning_state: in_winning_state,\n  },{\n    board: [\n      TileData(0, [0, 1]), TileData(1, [0, 2]), TileData(2, [2, 1]),\n    ],\n    moves: 0,\n    best_score: 'N/A',\n    currently_selected: null,\n    in_winning_state: in_winning_state,\n  },{\n    board: [\n      TileData(0, [0, 1]), TileData(1, [1, 2]),\n      TileData(2, [2, 0]), TileData(3, [3, 2]),\n    ],\n    moves: 0,\n    best_score: 'N/A',\n    currently_selected: null,\n    in_winning_state: in_winning_state,\n  },{\n    board: [\n      TileData(0, [0, 1, 3, 4]), TileData(1, [3, 1, 5]), TileData(2, [1, 2, 5]),\n      TileData(3, [0, 3, 4]), TileData(4, [0, 2, 4]), TileData(5, [1, 2, 4, 5]),\n    ],\n    moves: 0,\n    best_score: 'N/A',\n    currently_selected: null,\n    in_winning_state: in_winning_state,\n  },{\n    board: [\n      TileData(0, [0, 1, 3, 4]), TileData(1, [1, 5]), TileData(2, [1, 2, 4, 5]),\n      TileData(3, [3, 1]), TileData(4, [4, 5]), TileData(5, [5, 7]),\n      TileData(6, [3, 4, 6, 7]), TileData(7, [3, 7]), TileData(8, [4, 5, 7, 8]),\n    ],\n    moves: 0,\n    best_score: 'N/A',\n    currently_selected: null,\n    in_winning_state: in_winning_state,\n  },{\n    board: [\n      TileData(0, [0, 1, 3]), TileData(1, [1, 3, 5]), TileData(2, [1, 2, 5]),\n      TileData(3, [1, 3, 7]), TileData(4, [1, 3, 5, 7]), TileData(5, [2, 4, 4, 5, 8]),\n      TileData(6, [3, 6, 7]), TileData(7, [6, 7, 8, 4]), TileData(8, [5, 7, 8]),\n    ],\n    moves: 0,\n    best_score: 'N/A',\n    currently_selected: null,\n    in_winning_state: in_winning_state,\n  },{\n    board: [\n      TileData(0, [0, 1, 2, 3]), TileData(1, [1, 4]), TileData(2, [2, 5, 8]), TileData(3, [3, 6, 9, 12]),\n      TileData(4, [4, 5, 6, 7]), TileData(5, [5, 2, 8]), TileData(6, [6, 3, 9, 12]), TileData(7, [7, 10, 13]),\n      TileData(8, [8, 9, 10, 11]), TileData(9, [9, 3, 6, 12]), TileData(10, [10, 7, 13]), TileData(11, [11, 14]),\n      TileData(12, [12, 13, 14, 15]), TileData(13, [13, 9, 5, 1]), TileData(14, [14, 10, 6, 2]), TileData(15, [15, 11, 7, 3]),\n    ],\n    moves: 0,\n    best_score: 'N/A',\n    currently_selected: null,\n    in_winning_state: in_winning_state,\n  }],\n  current_level_index: 0,\n  current_level: current_level,\n  highest_unlocked_level: highest_unlocked_level,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport { createStore } from 'redux';\nimport reducer from './reducer';\n\nexport const store = createStore(reducer);\nexport const render = () => ReactDOM.render(<App state={store.getState()} />, document.getElementById('root'));\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  document.querySelector('body').addEventListener('mouseup', (event) => {\n    if (event.target.className !== 'Tile') {\n      store.dispatch({ type: 'CLEAR_HIGHLIGHTS' });\n    }\n  });\n}, false);\n\nrender();\nstore.subscribe(render);\nstore.subscribe(() => localStorage.setItem('chromattis_saved_state', JSON.stringify(store.getState())));\n","import { INITIAL_STATE } from './initial_state';\nimport { advance_tile_color, previous_tile_color, highlight_tiles, clear_highlights, shuffle_colors, solve_puzzle, navigate_level } from './actions';\n\nexport default function reducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case 'ADVANCE_TILE_COLOR':\n      return advance_tile_color(state, action.tile);\n    case 'PREVIOUS_TILE_COLOR':\n      return previous_tile_color(state, action.tile);\n    case 'HIGHLIGHT_TILES':\n      return highlight_tiles(state, action.tile);\n    case 'CLEAR_HIGHLIGHTS':\n      return clear_highlights(state);\n    case 'SHUFFLE_COLORS':\n      return shuffle_colors(state);\n    case 'NAVIGATE_LEVEL':\n      return navigate_level(state, action.level)\n    case 'SOLVE_PUZZLE':\n      return solve_puzzle(state);\n    default:\n      return state;\n  }\n}\n"],"sourceRoot":""}